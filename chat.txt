> in the admin dashboard where can the admin update student extensions like change or durations, pricing and even sometimes extend only a particular student

● Let me search for existing admin extension management interfaces:

● Bash(php artisan route:list | grep -i extension)
  ⎿    POST            admin/extensions/{payment}/approve .......... admin.extensions.approve › ExtensionController@approve
     39m
       GET|HEAD        enrollment/check-extension ........ enrollment.check-extension › Enrollmen
     … +4 lines (ctrl+r to expand)

● I can see there's an admin approval route but no full admin management interface. Let me check if there are any existing admin pages for extensions:

● Search(pattern: "resources/js/Pages/Admin/*Extension*")
  ⎿  Found 0 files

● Search(pattern: "resources/js/Pages/Admin/**/*Extension*")
  ⎿  Found 0 files

● Let me check what admin pages exist:

● Search(pattern: "resources/js/Pages/Admin/*")
  ⎿  Found 0 files

● Search(pattern: "resources/js/Pages/*Admin*")
  ⎿  Found 0 files

● Bash(find resources/js/Pages -name "*Admin*" -type d)
  ⎿  resources/js/Pages/Admin
     resources/js/Pages/Payments/Admin

● Search(pattern: "resources/js/Pages/Admin/**")
  ⎿  Found 23 files (ctrl+r to expand)

● I can see there are several admin pages but no dedicated Extensions management interface. Looking at the structure, there should be an Admin/Extensions section. Let me check the
  admin routes to see what's available:

● Bash(php artisan route:list | grep -i admin)
  ⎿    GET|HEAD        admin/ai-training ....................... admin.ai-training.index › Admin\
     AiTrainingController@index
       POST            admin/ai-training ....................... admin.ai-training.store › Admin\AiTrainingController@store
     … +117 lines (ctrl+r to expand)

● I can see there's only an admin.extensions.approve route but no comprehensive admin interface for extension management. Based on the existing admin structure, I need to create a
  proper admin interface for managing student extensions. Let me create the necessary components:

● Currently, there's no dedicated admin interface for extension management. The admin can only approve extension requests via the route /admin/extensions/{payment}/approve. Let me
  create a comprehensive admin extension management interface.

  First, let me check the current ExtensionController to see what admin functionality exists:

● Read(app\Http\Controllers\ExtensionController.php)
  ⎿  Read 40 lines (ctrl+r to expand)

● I can see there's only an approve method. I need to create a full admin controller and interface. Let me create an Admin\ExtensionController:

● Bash(php artisan make:controller Admin/ExtensionController)
  ⎿     INFO  Controller [C:\laragon\www\studyseco.com\app\Http\Controllers\Admin\ExtensionController.php] created successfully.

● Write(app\Http\Controllers\Admin\ExtensionController.php)
  ⎿  Updated app\Http\Controllers\Admin\ExtensionController.php with 220 additions and 2 removals
         3    namespace App\Http\Controllers\Admin;
         4
         5    use App\Http\Controllers\Controller;
         6 +  use App\Models\Enrollment;
         7 +  use App\Models\EnrollmentPayment;
         8 +  use App\Models\User;
         9 +  use App\Notifications\ExtensionApproved;
        10 +  use App\Notifications\ExtensionGranted;
        11    use Illuminate\Http\Request;
        12 +  use Inertia\Inertia;
        13
        14    class ExtensionController extends Controller
        15    {
        16 -      //
        17 -  }
        16 +      public function index(Request $request)
        17 +      {
        18 +          $query = EnrollmentPayment::with(['enrollment.user', 'paymentMethod'])
        19 +              ->where('payment_type', 'extension');
        20 +
        21 +          // Filter by status
        22 +          if ($request->has('status') && $request->status !== 'all') {
        23 +              $query->where('status', $request->status);
        24 +          }
        25 +
        26 +          // Search by student name or enrollment number
        27 +          if ($request->has('search') && !empty($request->search)) {
        28 +              $query->whereHas('enrollment', function ($q) use ($request) {
        29 +                  $q->where('enrollment_number', 'like', '%' . $request->search . '%')
        30 +                    ->orWhere('name', 'like', '%' . $request->search . '%');
        31 +              });
        32 +          }
        33 +
        34 +          $extensions = $query->orderBy('created_at', 'desc')
        35 +              ->paginate(20)
        36 +              ->withQueryString();
        37 +
        38 +          // Get statistics
        39 +          $stats = [
        40 +              'total' => EnrollmentPayment::where('payment_type', 'extension')->count(),
        41 +              'pending' => EnrollmentPayment::where('payment_type', 'extension')->where('status', 'pending')->count(),
        42 +              'verified' => EnrollmentPayment::where('payment_type', 'extension')->where('status', 'verified')->count(),
        43 +              'rejected' => EnrollmentPayment::where('payment_type', 'extension')->where('status', 'rejected')->count(),
        44 +          ];
        45 +
        46 +          return Inertia::render('Admin/Extensions/Index', [
        47 +              'extensions' => $extensions,
        48 +              'stats' => $stats,
        49 +              'filters' => $request->only(['status', 'search']),
        50 +          ]);
        51 +      }
        52 +
        53 +      public function show(EnrollmentPayment $payment)
        54 +      {
        55 +          if ($payment->payment_type !== 'extension') {
        56 +              return redirect()->route('admin.extensions.index')
        57 +                  ->withErrors(['error' => 'Invalid extension payment']);
        58 +          }
        59 +
        60 +          $payment->load(['enrollment.user', 'paymentMethod']);
        61 +
        62 +          return Inertia::render('Admin/Extensions/Show', [
        63 +              'extension' => $payment,
        64 +          ]);
        65 +      }
        66 +
        67 +      public function approve(EnrollmentPayment $payment)
        68 +      {
        69 +          if ($payment->payment_type !== 'extension') {
        70 +              return back()->withErrors(['error' => 'Invalid payment type']);
        71 +          }
        72 +
        73 +          if ($payment->status !== 'pending') {
        74 +              return back()->withErrors(['error' => 'Extension already processed']);
        75 +          }
        76 +
        77 +          $enrollment = $payment->enrollment;
        78 +
        79 +          // Update payment status
        80 +          $payment->update([
        81 +              'status' => 'verified',
        82 +              'verified_at' => now(),
        83 +              'verified_by' => auth()->id()
        84 +          ]);
        85 +
        86 +          // Extend access duration
        87 +          $currentExpiry = $enrollment->access_expires_at ?? now();
        88 +          $newExpiry = $currentExpiry->addMonths($payment->extension_months);
        89 +
        90 +          $enrollment->update([
        91 +              'access_expires_at' => $newExpiry,
        92 +              'last_extension_at' => now()
        93 +          ]);
        94 +
        95 +          // Send notification to student
        96 +          try {
        97 +              $enrollment->user->notify(new ExtensionApproved($enrollment, $payment));
        98 +          } catch (\Exception $e) {
        99 +              logger('Failed to send extension approval notification: ' . $e->getMessage());
       100 +          }
       101 +
       102 +          return back()->with('success', 'Extension approved successfully! Student has been notified.');
       103 +      }
       104 +
       105 +      public function reject(EnrollmentPayment $payment, Request $request)
       106 +      {
       107 +          $request->validate([
       108 +              'rejection_reason' => 'required|string|max:500'
       109 +          ]);
       110 +
       111 +          if ($payment->payment_type !== 'extension') {
       112 +              return back()->withErrors(['error' => 'Invalid payment type']);
       113 +          }
       114 +
       115 +          if ($payment->status !== 'pending') {
       116 +              return back()->withErrors(['error' => 'Extension already processed']);
       117 +          }
       118 +
       119 +          // Update payment status
       120 +          $payment->update([
       121 +              'status' => 'rejected',
       122 +              'verified_at' => now(),
       123 +              'verified_by' => auth()->id(),
       124 +              'admin_notes' => $request->rejection_reason
       125 +          ]);
       126 +
       127 +          return back()->with('success', 'Extension rejected with reason provided.');
       128 +      }
       129 +
       130 +      public function grantExtension(Request $request)
       131 +      {
       132 +          $request->validate([
       133 +              'user_id' => 'required|exists:users,id',
       134 +              'months' => 'required|integer|min:1|max:24',
       135 +              'reason' => 'required|string|max:500'
       136 +          ]);
       137 +
       138 +          $user = User::findOrFail($request->user_id);
       139 +          $enrollment = $user->enrollments()->first();
       140 +
       141 +          if (!$enrollment) {
       142 +              return back()->withErrors(['error' => 'Student has no active enrollment']);
       143 +          }
       144 +
       145 +          // Extend access duration
       146 +          $currentExpiry = $enrollment->access_expires_at ?? now();
       147 +          $newExpiry = $currentExpiry->addMonths($request->months);
       148 +
       149 +          $enrollment->update([
       150 +              'access_expires_at' => $newExpiry,
       151 +              'last_extension_at' => now()
       152 +          ]);
       153 +
       154 +          // Create a record of this admin-granted extension
       155 +          EnrollmentPayment::create([
       156 +              'enrollment_id' => $enrollment->id,
       157 +              'payment_method_id' => null,
       158 +              'reference_number' => 'ADMIN-' . now()->format('YmdHis'),
       159 +              'amount' => 0,
       160 +              'currency' => $enrollment->currency,
       161 +              'payment_type' => 'extension',
       162 +              'extension_months' => $request->months,
       163 +              'status' => 'verified',
       164 +              'verified_at' => now(),
       165 +              'verified_by' => auth()->id(),
       166 +              'admin_notes' => 'Admin granted extension: ' . $request->reason
       167 +          ]);
       168 +
       169 +          // Send notification
       170 +          try {
       171 +              $user->notify(new ExtensionGranted($enrollment, $request->months, $request->reason));
       172 +          } catch (\Exception $e) {
       173 +              logger('Failed to send extension granted notification: ' . $e->getMessage());
       174 +          }
       175 +
       176 +          return back()->with('success',
       177 +              "Successfully granted {$request->months} month(s) extension to {$user->name}");
       178 +      }
       179 +
       180 +      public function updatePricing(Request $request)
       181 +      {
       182 +          $request->validate([
       183 +              'region' => 'required|string|in:malawi,south_africa,zambia,botswana,zimbabwe,international',
       184 +              'pricing' => 'required|array',
       185 +              'pricing.*' => 'required|numeric|min:0'
       186 +          ]);
       187 +
       188 +          // Store pricing in system settings or cache
       189 +          // This is a simplified approach - you might want to store in database
       190 +          $settingKey = "extension_pricing_{$request->region}";
       191 +
       192 +          // You can implement this by storing in system_settings table
       193 +          // For now, this is a placeholder for the functionality
       194 +
       195 +          return back()->with('success', 'Extension pricing updated successfully');
       196 +      }
       197 +
       198 +      public function bulkAction(Request $request)
       199 +      {
       200 +          $request->validate([
       201 +              'action' => 'required|in:approve,reject',
       202 +              'payment_ids' => 'required|array',
       203 +              'payment_ids.*' => 'exists:enrollment_payments,id',
       204 +              'rejection_reason' => 'required_if:action,reject|string|max:500'
       205 +          ]);
       206 +
       207 +          $payments = EnrollmentPayment::whereIn('id', $request->payment_ids)
       208 +              ->where('payment_type', 'extension')
       209 +              ->where('status', 'pending')
       210 +              ->get();
       211 +
       212 +          $processed = 0;
       213 +          foreach ($payments as $payment) {
       214 +              if ($request->action === 'approve') {
       215 +                  $this->approve($payment);
       216 +              } else {
       217 +                  $payment->update([
       218 +                      'status' => 'rejected',
       219 +                      'verified_at' => now(),
       220 +                      'verified_by' => auth()->id(),
       221 +                      'admin_notes' => $request->rejection_reason
       222 +                  ]);
       223 +              }
       224 +              $processed++;
       225 +          }
       226 +
       227 +          return back()->with('success', "Successfully {$request->action}d {$processed} extension(s)");
       228 +      }
       229 +  }
       230   \ No newline at end of file

● Now let me create the routes for this admin interface:

● Read(routes\web.php)
  ⎿  Read 50 lines (ctrl+r to expand)

● That doesn't look like the routes file. Let me find the correct routes file:

● Bash(grep -n "admin/extensions" routes/web.php)
  ⎿  No matches found

● Bash(grep -n "ExtensionController" routes/web.php)
  ⎿  410:    Route::get('/student/extension', [\App\Http\Controllers\ExtensionController::class, 'index'])->name('student.extension');
     411:    Route::post('/student/extension', [\App\Http\Controllers\ExtensionController::class, 'store'])->name('student.extension.store');
     862:        Route::post('/extensions/{payment}/approve', [\App\Http\Controllers\ExtensionController::class, 'approve'])->name('extensions.approve');

● Let me add the new admin routes to the existing admin group:

● Read(routes\web.php)
  ⎿  Read 10 lines (ctrl+r to expand)

● Update(routes\web.php)
  ⎿  Updated routes\web.php with 9 additions and 1 removal
       859            Route::get('/enrollments/{enrollment}/payment-proof', [EnrollmentController::class, 'viewPaymentProof'])->name('enrollments.payment-proof');
       860
       861            // Admin extension management
       862 -          Route::post('/extensions/{payment}/approve', [\App\Http\Controllers\ExtensionController::class, 'approve'])->name('extensions.approve');
       862 +          Route::prefix('extensions')->name('extensions.')->group(function () {
       863 +              Route::get('/', [\App\Http\Controllers\Admin\ExtensionController::class, 'index'])->name('index');
       864 +              Route::get('/{payment}', [\App\Http\Controllers\Admin\ExtensionController::class, 'show'])->name('show');
       865 +              Route::post('/{payment}/approve', [\App\Http\Controllers\Admin\ExtensionController::class, 'approve'])->name('approve');
       866 +              Route::post('/{payment}/reject', [\App\Http\Controllers\Admin\ExtensionController::class, 'reject'])->name('reject');
       867 +              Route::post('/grant-extension', [\App\Http\Controllers\Admin\ExtensionController::class, 'grantExtension'])->name('grant');
       868 +              Route::post('/update-pricing', [\App\Http\Controllers\Admin\ExtensionController::class, 'updatePricing'])->name('update-pricing');
       869 +              Route::post('/bulk-action', [\App\Http\Controllers\Admin\ExtensionController::class, 'bulkAction'])->name('bulk-action');
       870 +          });
       871
       872            // Admin payment methods management
       873            Route::resource('payment-methods', \App\Http\Controllers\Admin\PaymentMethodController::class);

● Now let me create the Vue.js admin interface. First, I need to create the Extensions directory and index page:

● Bash(mkdir -p resources/js/Pages/Admin/Extensions)
  ⎿  (No content)

● Write(resources\js\Pages\Admin\Extensions\Index.vue)
  ⎿  Wrote 1 lines to resources\js\Pages\Admin\Extensions\Index.vue
     <script setup>
     import { Head, Link, useForm, router } from '@inertiajs/vue3';
     import { ref, computed } from 'vue';
     import DashboardLayout from '@/Layouts/DashboardLayout.vue';
     const props = defineProps({
         auth: Object,
         extensions: Object,
         stats: Object,
         filters: Object,

● Now let me create the Show page for detailed extension view:

● Write(resources\js\Pages\Admin\Extensions\Show.vue)
  ⎿  Wrote 1 lines to resources\js\Pages\Admin\Extensions\Show.vue
     <script setup>
     import { Head, Link, router } from '@inertiajs/vue3';
     import { ref } from 'vue';
     import DashboardLayout from '@/Layouts/DashboardLayout.vue';
     const props = defineProps({
         auth: Object,
         extension: Object,
     });
  ⎿  Read resources\js\Pages\Admin\Extensions\Show.vue (255 lines)
  ⎿  Referenced file resources\js\Pages\Admin\Extensions\Index.vue
  ⎿  Referenced file routes\web.php
  ⎿  Read app\Http\Controllers\Admin\ExtensionController.php (229 lines)
  ⎿  Read app\Http\Controllers\ExtensionController.php (167 lines)
  ⎿  Todo list read (2 items)
  ⎿  5-hour limit reached ∙ resets 11am
     /upgrade to increase your usage limit.
